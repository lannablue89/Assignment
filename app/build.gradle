plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
}

def keystorePropertiesFile = file("../keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion build_versions.compile_versions

    defaultConfig {
        applicationId "com.nab.assignment"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "target"
    productFlavors {
        sandbox {
            dimension "target"
            applicationIdSuffix ".sandbox"

            buildConfigField "String", "ENDPOINT", '"https://api.openweathermap.org/"'
            buildConfigField "String", "API_KEY", keystoreProperties['API_KEY']
        }
    }

    signingConfigs {
        if (keystoreProperties.containsKey('debugStoreFile')) {
            debug {
                keyAlias keystoreProperties['debugKeyAlias']
                keyPassword keystoreProperties['debugKeyPassword']
                storeFile file(keystoreProperties['debugStoreFile'])
                storePassword keystoreProperties['debugStorePassword']
            }
        }

        if (keystoreProperties.containsKey('releaseStoreFile')) {
            release {
                keyAlias keystoreProperties['releaseKeyAlias']
                keyPassword keystoreProperties['releaseKeyPassword']
                storeFile file(keystoreProperties['releaseStoreFile'])
                storePassword keystoreProperties['releaseStorePassword']
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            if (keystoreProperties.containsKey('debugStoreFile')) {
                signingConfig signingConfigs.debug
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            if (keystoreProperties.containsKey('releaseStoreFile')) {
                signingConfig signingConfigs.release
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-beta01'

    implementation "androidx.fragment:fragment-ktx:$versions.fragment_ktx"
    implementation "com.google.android.material:material:$versions.material_components"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"

    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    // dagger
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // retrofit for api calls
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
    implementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"

    // root check
    implementation('com.github.Stericson:RootTools:5.0') { transitive = false }
    implementation 'com.github.Stericson:RootShell:1.6'

    // Test
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation "io.mockk:mockk:$versions.mockk"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines_test"
    testImplementation "androidx.arch.core:core-testing:$versions.arch_core_testing"
    testImplementation "org.hamcrest:hamcrest:$versions.hamcrest"

    // Required for instrumented tests
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}